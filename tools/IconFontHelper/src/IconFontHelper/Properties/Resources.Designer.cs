//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IconFontHelper.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("IconFontHelper.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to :: ========== FUNCTIONS ==========
        ///EXIT /B
        ///
        ///:UPDATEICON
        ///	CALL :NORMALIZEPATH %SVGDIRECTORY%%2
        ///	SET SVG=%RETVAL%
        ///	ECHO Adding icon number %1: %2
        ///	ECHO Number %1: %2&gt;&gt; %FULLLOGPATH%
        ///	%PROGRAMPATH% -lang=ff -script fontforge/updateGlyph.ff %FULLFONTPATH% %SVG% %1 %3 %4 %5 %6 &gt; NUL 2&gt;&amp;1
        ///
        ///	EXIT /B
        ///
        ///:NORMALIZEPATH
        ///:: resolve relative to absolute path.
        ///	SET RETVAL=%~dpfn1
        ///	EXIT /B.
        /// </summary>
        internal static string BatchFooter {
            get {
                return ResourceManager.GetString("BatchFooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @ECHO off
        ///
        ///:: configuration options
        ///SET PROGRAMPATH=&quot;C:\Program Files (x86)\FontForgeBuilds\bin\fontforge.exe&quot;
        ///::Examples: &quot;\.&quot;, &quot;..\icon_font\&quot;, &quot;.\output\&quot;, &quot;D:\absolute\path\without\spaces\&quot;
        ///SET OUTDIRECTORY=&quot;.\output\&quot;
        ///SET FONTNAME=KNXUF-IconFont
        ///SET FONTNAMETYPE=.ttf
        ///SET LOGFILETYPE=.log
        ///
        ///:: actual script
        ///IF EXIST ..\..\optimized_svg\raw_svg\ (
        ///	SET SVGDIRECTORY=..\..\optimized_svg\raw_svg\
        ///) ELSE (
        ///	IF EXIST ..\..\optimized_svg\ (
        ///		SET SVGDIRECTORY=..\..\optimized_svg\
        ///	) ELSE (
        ///		SE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BatchHeader {
            get {
                return ResourceManager.GetString("BatchHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #icon {0}
        ///Select({0})
        ///Import(&quot;{1}&quot;,0,16)
        ///RemoveOverlap()
        ///CorrectDirection()
        ///
        ///bounding = GlyphInfo(&quot;BBox&quot;)
        ///height = bounding[3] - bounding[1]
        ///factor = ((topPosition - 2 * paddingVertical) / height) * 100
        ///#Scale(factor)
        ///
        ///bounding = GlyphInfo(&quot;BBox&quot;)
        ///deltaX = -bounding[0] + paddingHorizontal
        ///deltaY = (topPosition - paddingVertical - bounding[3])
        ///width = bounding[2] + paddingHorizontal + 10
        ///
        ///logText = StrJoin([&quot;GLYPHDETAILS&quot;,ToString({0}),ToString(deltaX),ToString(deltaY),ToString(width),ToStrin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LoggingContent {
            get {
                return ResourceManager.GetString("LoggingContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # set a few constants
        ///scale = 1024
        ///paddingHorizontal = 10
        ///paddingVertical = 10
        ///topPosition = 820
        ///
        ///# create a new font
        ///New()
        ///Reencode(&quot;UnicodeFull&quot;)
        ///ScaleToEm(scale).
        /// </summary>
        internal static string LoggingHeader {
            get {
                return ResourceManager.GetString("LoggingHeader", resourceCulture);
            }
        }
    }
}
